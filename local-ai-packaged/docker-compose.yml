volumes:
  n8n_storage:
  postgres_storage:
  qdrant_storage:
  open-webui:
  flowise:

networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  env_file:
    - .env
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_BASIC_AUTH_ACTIVE
    - N8N_BASIC_AUTH_USER
    - N8N_BASIC_AUTH_PASSWORD
    - N8N_DIAGNOSTICS_ENABLED
    - N8N_PERSONALIZATION_ENABLED
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - KB_PATH
    - TZ=Asia/Ho_Chi_Minh
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  env_file:
    - .env
  environment:
    - OLLAMA_PATH
    - TZ=Asia/Ho_Chi_Minh
  deploy:
    resources:
      limits:
        cpus: '6'           # Limit to 6 CPU
        memory: 10G          # Hard limit of 10GB memory
      reservations:
        cpus: '1'          # Soft limit of 1 CPU
        memory: 2GB          # Soft limit of 2GB memory
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ${OLLAMA_PATH}:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  networks: ['demo']
  env_file:
    - .env
  environment:
    - OLLAMA_PATH
    - TZ=Asia/Ho_Chi_Minh
  deploy:
    resources:
      limits:
        cpus: '1'           # Limit to 1 CPU
        memory: 2G          # Hard limit of 2GB memory
      reservations:
        cpus: '1'          # Soft limit of 1 CPU
        memory: 2GB          # Soft limit of 2GB memory
  volumes:
    - ${OLLAMA_PATH}:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
#   - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.1; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"
# this is to pull the models from the ollama server
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull ontocord/vinallama; OLLAMA_HOST=ollama:11434 ollama pull llama3.1; OLLAMA_HOST=ollama:11434 ollama pull qwen2.5-coder"
services:
  flowise:
    image: flowiseai/flowise
    container_name: flowise
    networks: ['demo']
    restart: unless-stopped
    environment:
        - PORT=3001
        - TZ=Asia/Ho_Chi_Minh
    ports:
        - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"        
    volumes:
        - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    networks: ['demo']
    restart: unless-stopped
    environment:
      - TZ=Asia/Ho_Chi_Minh
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 5432:5432
    env_file:
      - .env
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
      - POSTGRES_DB
      - TZ=Asia/Ho_Chi_Minh
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      # test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] # Check against template1 initially
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ${KB_PATH}:/home/node/file-storage
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu
